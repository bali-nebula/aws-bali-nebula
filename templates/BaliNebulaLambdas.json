{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "This template creates the API gateway and lambda functions needed to implement the Bali Nebula.",
  "Parameters": {
    "EnvironmentBucket": {
      "Description": "The name of the S3 bucket that contains the environment configuration files.",
      "Type": "String",
      "Default": "craterdog-bali-nebula-us-east-1"
    }
  },
  "Outputs": {
    "ApiId": {
      "Value": {
        "Ref": "RepositoryAPI"
      }
    }
  },
  "Resources": {
    "RepositoryAPI": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "Nebula API",
        "Description": "This API allows a client application to interact with the Bali Nebula."
      }
    },
    "RepositoryAPIDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "RepositoryAPI"
        }
      },
      "DependsOn": [
        "PingCertificateMethod",
        "PostCertificateMethod",
        "GetCertificateMethod",
        "PutCertificateMethod",
        "DeleteCertificateMethod"
      ]
    },
    "RepositoryLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": ["sts:AssumeRole"],
              "Effect": "Allow",
              "Principal": { "Service": ["lambda.amazonaws.com"] }
            }
          ]
        },
        "Path": "/service-role/",
        "Policies": [
          {
            "PolicyName": "LambdaPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:HeadObject",
                    "s3:PostObject",
                    "s3:GetObject",
                    "s3:PutObject",
                    "s3:DeleteObject"
                  ],
                  "Resource": [
                    "arn:aws:s3:::craterdog-bali-certificates-us-west-2/*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region"
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId"
                          },
                          ":log-group:/aws/lambda/bali-nebula-repository:*"
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "RepositoryLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/bali-nebula-repository",
        "RetentionInDays": 1
      }
    },
    "RepositoryLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "bali-nebula-repository",
        "Description": "This lambda function implements the Bali Nebula Repository API.",
        "Code": {
          "S3Bucket": {
            "Ref": "EnvironmentBucket"
          },
          "S3Key": "lambdas/BaliNebulaRepository.zip"
        },
        "Handler": "BaliNebulaRepository.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "RepositoryLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 3
      }
    },
    "RepositoryLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Principal": "apigateway.amazonaws.com",
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RepositoryLambda",
            "Arn"
          ]
        },
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "RepositoryAPI"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "CertificateResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "RepositoryAPI"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "RepositoryAPI",
            "RootResourceId"
          ]
        },
        "PathPart": "certificate"
      }
    },
    "CertificateIdentifierResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "RepositoryAPI"
        },
        "ParentId": {
          "Ref": "CertificateResource"
        },
        "PathPart": "{identifier}"
      }
    },
    "PingCertificateMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "RepositoryAPI"
        },
        "ResourceId": {
          "Ref": "CertificateIdentifierResource"
        },
        "AuthorizationType": "NONE",
        "HttpMethod": "HEAD",
        "RequestParameters": {
          "method.request.path.identifier": true
        },
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RepositoryLambda",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        }
      }
    },
    "PostCertificateMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "RepositoryAPI"
        },
        "ResourceId": {
          "Ref": "CertificateIdentifierResource"
        },
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "RequestParameters": {
          "method.request.path.identifier": true
        },
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RepositoryLambda",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        }
      }
    },
    "GetCertificateMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "RepositoryAPI"
        },
        "ResourceId": {
          "Ref": "CertificateIdentifierResource"
        },
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "RequestParameters": {
          "method.request.path.identifier": true
        },
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RepositoryLambda",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        }
      }
    },
    "PutCertificateMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "RepositoryAPI"
        },
        "ResourceId": {
          "Ref": "CertificateIdentifierResource"
        },
        "AuthorizationType": "NONE",
        "HttpMethod": "PUT",
        "RequestParameters": {
          "method.request.path.identifier": true
        },
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RepositoryLambda",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        }
      }
    },
    "DeleteCertificateMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "RepositoryAPI"
        },
        "ResourceId": {
          "Ref": "CertificateIdentifierResource"
        },
        "AuthorizationType": "NONE",
        "HttpMethod": "DELETE",
        "RequestParameters": {
          "method.request.path.identifier": true
        },
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RepositoryLambda",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        }
      }
    }
  }
}
