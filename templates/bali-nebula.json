{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "This cloud formation template is used to setup the Bali Nebulaâ„¢ environment.",
  "Parameters": {
    "ServiceName": {
      "Description": "The name of the lambda function.",
      "Type": "String",
      "Default": "bali-nebula-repository"
    },
    "TestColor": {
      "Description": "The color of the environment being used for testing.",
      "Type": "String",
      "Default": "green",
      "AllowedValues" : ["blue", "green"],
      "ConstraintDescription" : "You must specify either 'blue' or 'green'."
    }
  },
  "Conditions": {
    "BlueIsTesting" : {
       "Fn::Equals": [
          {"Ref": "TestColor"},
          "blue"
       ]
    },
    "GreenIsTesting" : {
       "Fn::Equals": [
          {"Ref": "TestColor"},
          "green"
       ]
    }
  },
  "Resources": {
    "NebulaDomain": {
      "Type": "AWS::ApiGateway::DomainName",
      "Properties": {
        "RegionalCertificateArn": "arn:aws:acm:us-east-1:821699068808:certificate/066d667f-ec36-486f-9fca-42136deb31bd",
        "DomainName": "bali-nebula.net",
        "EndpointConfiguration" : {
          "Types" : [ "REGIONAL" ]
        }
      }
    },
    "NebulaRouting": {
      "Type" : "AWS::Route53::RecordSet",
      "DependsOn": [ "NebulaDomain" ],
      "Properties" : {
        "Name": "bali-nebula.net.",
        "Comment" : "Route all service requests to the service API gateway endpoint,",
        "Type" : "A",
        "HostedZoneName" : "bali-nebula.net.",
        "AliasTarget" : {
          "DNSName": { "Fn::GetAtt": [ "NebulaDomain", "RegionalDomainName" ] },
          "EvaluateTargetHealth" : false,
          "HostedZoneId" : "Z1UJRXOUMOOFQ8"
        }
      }
    },
    "StaticAPI": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "Bali Nebula Static Content",
        "Description": "This API allows a client application to retrieve Bali Nebula static content.",
        "BinaryMediaTypes": [
          "*/*"
        ],
        "EndpointConfiguration": { "Types": [ "REGIONAL" ] }
      }
    },
    "StaticTypeResource": {
      "Type": "AWS::ApiGateway::Resource",
      "DependsOn": [ "StaticAPI" ],
      "Properties": {
        "ParentId": { "Fn::GetAtt": [ "StaticAPI", "RootResourceId" ] },
        "RestApiId": { "Ref": "StaticAPI" },
        "PathPart": "{type}"
      }
    },
    "StaticContentResource": {
      "Type": "AWS::ApiGateway::Resource",
      "DependsOn": [ "StaticTypeResource" ],
      "Properties": {
        "ParentId": { "Ref": "StaticTypeResource" },
        "RestApiId": { "Ref": "StaticAPI" },
        "PathPart": "{content}"
      }
    },
    "StaticContentMethod": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": [ "StaticContentResource" ],
      "Properties": {
        "RestApiId": { "Ref": "StaticAPI" },
        "ResourceId": { "Ref": "StaticContentResource" },
        "AuthorizationType": "NONE",
        "ApiKeyRequired": false,
        "HttpMethod": "GET",
        "RequestParameters": {
          "method.request.path.type": true,
          "method.request.path.content": true,
          "method.request.header.Accept": false
        },
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {
              "method.response.header.Content-Type": true,
              "method.response.header.Content-Length": true
            }
          },
          {
            "StatusCode": 400
          },
          {
            "StatusCode": 500
          }
        ],
        "Integration": {
          "Type": "AWS",
          "Credentials": { "Fn::GetAtt": [ "StaticRole", "Arn" ] },
          "IntegrationHttpMethod": "GET",
          "RequestParameters": {
            "integration.request.path.type": "method.request.path.type",
            "integration.request.path.content": "method.request.path.content",
            "integration.request.header.Accept": "method.request.header.Accept",
            "integration.request.header.x-amz-acl": "'authenticated-read'"
          },
          "PassthroughBehavior": "WHEN_NO_MATCH",
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.Content-Type": "integration.response.header.Content-Type",
                "method.response.header.Content-Length": "integration.response.header.Content-Length"
              }
            },
            {
              "StatusCode": 400,
              "SelectionPattern": "4\\d{2}"
            },
            {
              "StatusCode": 500,
              "SelectionPattern": "5\\d{2}"
            }
          ],
          "Uri": "arn:aws:apigateway:us-east-1:s3:path/craterdog-websites-us-east-1/craterdog/{type}/{content}"
        }
      }
    },
    "StaticDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": [ "StaticContentMethod" ],
      "Properties": {
        "RestApiId": { "Ref": "StaticAPI" }
      }
    },
    "StaticBlueStage": {
      "Type": "AWS::ApiGateway::Stage",
      "DependsOn": [ "StaticDeployment" ],
      "Properties": {
        "DeploymentId": { "Ref": "StaticDeployment" },
        "RestApiId": { "Ref": "StaticAPI" },
        "StageName": "blue",
        "Description" : "This stage deploys the Bali Nebula static content to the blue environment.",
        "Variables" : { "EnvironmentColor": "blue" },
        "TracingEnabled" : false,
        "CacheClusterEnabled" : false,
        "CacheClusterSize" : "0.5"
      }
    },
    "StaticBluePath": {
      "Type": "AWS::ApiGateway::BasePathMapping",
      "DependsOn": [ "StaticBlueStage" ],
      "Properties": {
        "RestApiId": { "Ref": "StaticAPI" },
        "DomainName": "bali-nebula.net",
        "BasePath": {
          "Fn::If" : [
            "BlueIsTesting",
            "test-static",
            "static"
          ]
        },
        "Stage": "blue"
      }
    },
    "StaticGreenStage": {
      "Type": "AWS::ApiGateway::Stage",
      "DependsOn": [ "StaticDeployment" ],
      "Properties": {
        "DeploymentId": { "Ref": "StaticDeployment" },
        "RestApiId": { "Ref": "StaticAPI" },
        "StageName": "green",
        "Description" : "This stage deploys the Bali Nebula static content to the green environment.",
        "Variables" : { "EnvironmentColor": "green" },
        "TracingEnabled" : false,
        "CacheClusterEnabled" : false,
        "CacheClusterSize" : "0.5"
      }
    },
    "StaticGreenPath": {
      "Type": "AWS::ApiGateway::BasePathMapping",
      "DependsOn": [ "StaticGreenStage" ],
      "Properties": {
        "RestApiId": { "Ref": "StaticAPI" },
        "DomainName": "bali-nebula.net",
        "BasePath": {
          "Fn::If" : [
            "GreenIsTesting",
            "test-static",
            "static"
          ]
        },
        "Stage": "green"
      }
    },
    "StaticRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": ["apigateway.amazonaws.com"] },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "S3Policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Resource": [
                    "arn:aws:s3:::craterdog-websites-us-east-1/craterdog/*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "ServiceApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "Bali Nebula Repository Service",
        "Description": "This API allows a client application to interact with the Bali Nebula Repository Service.",
        "EndpointConfiguration": { "Types": [ "REGIONAL" ] }
      }
    },
    "ServiceResource": {
      "Type": "AWS::ApiGateway::Resource",
      "DependsOn": [ "ServiceApi" ],
      "Properties": {
        "RestApiId": { "Ref": "ServiceApi" },
        "ParentId": { "Fn::GetAtt": [ "ServiceApi", "RootResourceId" ] },
        "PathPart": "{proxy+}"
      }
    },
    "ServiceMethod": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": [ "ServiceResource" ],
      "Properties": {
        "RestApiId": { "Ref": "ServiceApi" },
        "ResourceId": { "Ref": "ServiceResource" },
        "AuthorizationType": "NONE",
        "HttpMethod": "ANY",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": { "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ServiceLambda.Arn}/invocations" }
        }
      }
    },
    "ServiceDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": [ "ServiceMethod" ],
      "Properties": {
        "RestApiId": { "Ref": "ServiceApi" }
      }
    },
    "ServiceBlueStage": {
      "Type": "AWS::ApiGateway::Stage",
      "DependsOn": [ "ServiceDeployment" ],
      "Properties": {
        "DeploymentId": { "Ref": "ServiceDeployment" },
        "RestApiId": { "Ref": "ServiceApi" },
        "StageName": "blue",
        "Description" : "This stage deploys the Bali Nebula Repository Service in the blue environment.",
        "Variables" : { "EnvironmentColor": "blue" },
        "TracingEnabled" : false,
        "CacheClusterEnabled" : false,
        "CacheClusterSize" : "0.5"
      }
    },
    "ServiceBluePath": {
      "Type": "AWS::ApiGateway::BasePathMapping",
      "DependsOn": [ "ServiceBlueStage" ],
      "Properties": {
        "RestApiId": { "Ref": "ServiceApi" },
        "DomainName": "bali-nebula.net",
        "BasePath": {
          "Fn::If" : [
            "BlueIsTesting",
            "test-repository",
            "repository"
          ]
        },
        "Stage": "blue"
      }
    },
    "ServiceGreenStage": {
      "Type": "AWS::ApiGateway::Stage",
      "DependsOn": [ "ServiceDeployment" ],
      "Properties": {
        "DeploymentId": { "Ref": "ServiceDeployment" },
        "RestApiId": { "Ref": "ServiceApi" },
        "StageName": "green",
        "Description" : "This stage deploys the Bali Nebula Repository Service in the green environment.",
        "Variables" : { "EnvironmentColor": "green" },
        "TracingEnabled" : false,
        "CacheClusterEnabled" : false,
        "CacheClusterSize" : "0.5"
      }
    },
    "ServiceGreenPath": {
      "Type": "AWS::ApiGateway::BasePathMapping",
      "DependsOn": [ "ServiceGreenStage" ],
      "Properties": {
        "RestApiId": { "Ref": "ServiceApi" },
        "DomainName": "bali-nebula.net",
        "BasePath": {
          "Fn::If" : [
            "GreenIsTesting",
            "test-repository",
            "repository"
          ]
        },
        "Stage": "green"
      }
    },
    "ServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": ["lambda.amazonaws.com"] },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "LambdaPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:GetObject"
                  ],
                  "Resource": [
                    "arn:aws:s3:::bali-nebula-names-us-east-1/*",
                    "arn:aws:s3:::bali-nebula-contracts-us-east-1/*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:GetObject",
                    "s3:DeleteObject"
                  ],
                  "Resource": [
                    "arn:aws:s3:::bali-nebula-documents-us-east-1/*",
                    "arn:aws:s3:::bali-nebula-messages-us-east-1/*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:ListBucket"
                  ],
                  "Resource": [
                    "arn:aws:s3:::bali-nebula-messages-us-east-1"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    { "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ServiceName}:*" }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "ServiceLambda": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [ "ServiceRole" ],
      "Properties": {
        "FunctionName": { "Ref": "ServiceName" },
        "Description": "This lambda function implements the Bali Nebula Repository Service.",
        "Role": { "Fn::GetAtt": [ "ServiceRole", "Arn" ] },
        "Runtime": "nodejs12.x",
        "MemorySize": 256,
        "Timeout": 10,
        "Code": {
          "S3Bucket": "craterdog-aws-us-east-1",
          "S3Key": { "Fn::Sub": "lambdas/${ServiceName}.zip" }
        },
        "Handler": { "Fn::Sub": "${ServiceName}.handler" }
      }
    },
    "ServicePermission": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": [ "ServiceLambda" ],
      "Properties": {
        "Principal": "apigateway.amazonaws.com",
        "Action": "lambda:InvokeFunction",
        "FunctionName": { "Fn::GetAtt": [ "ServiceLambda", "Arn" ] },
        "SourceArn": { "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServiceApi}/*" }
      }
    },
    "ServiceLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "DependsOn": [ "ServiceLambda" ],
      "Properties": {
        "LogGroupName": { "Fn::Sub": "/aws/lambda/${ServiceLambda}" },
        "RetentionInDays": 7
      }
    },
    "ApiRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": ["apigateway.amazonaws.com"] },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
            { "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs" }
        ]
      }
    },
    "ApiAccount": {
      "Type": "AWS::ApiGateway::Account",
      "DependsOn": [ "ApiRole" ],
      "Properties": {
        "CloudWatchRoleArn": { "Fn::GetAtt": [ "ApiRole", "Arn" ] }
      }
    }
  }
}
